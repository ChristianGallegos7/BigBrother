// En: context/AuthContext.tsx

import { createClientesTable, createGrabacionesTable, createListaClientesTable, getDBConnection } from '@/utils/database/database';
import { useRouter, useSegments } from 'expo-router';
import * as SecureStore from 'expo-secure-store';
import React, { createContext, useContext, useEffect, useState } from 'react';

const AuthContext = createContext<any>(null);

// Este hook puede leer el contexto de autenticaci√≥n
export const useAuth = () => {
    return useContext(AuthContext);
};

// Hook personalizado para proteger las rutas
function useProtectedRoute(session: string | null, isLoading: boolean) {
    const segments = useSegments();
    const router = useRouter();

    useEffect(() => {
        // üëá No hacer nada mientras est√° cargando
        if (isLoading) {
            return;
        }

        // No hagas nada si los segmentos del router a√∫n no est√°n listos.
        if (!Array.isArray(segments)) {
            return;
        }

        // Verifica si la ruta actual est√° dentro del grupo '(stack)' (rutas protegidas)
        const inProtectedRoute = segments[0] === '(stack)';

        // Permitir acceso sin sesi√≥n a las pantallas de recuperaci√≥n y cambio de contrase√±a
        const isPasswordRecovery = segments[1] === 'recuperar-password';
        const isPasswordChange = segments[1] === 'cambiar-password';

        if (!session && inProtectedRoute && !isPasswordRecovery && !isPasswordChange) {
            // Si el usuario NO tiene sesi√≥n e intenta entrar a rutas protegidas (excepto recuperar-password y cambiar-password),
            // lo mandamos al login (la ra√≠z '/').
            console.log('üîí Sin sesi√≥n, redirigiendo al login');
            router.replace('/');
        } else if (session && !inProtectedRoute) {
            // Si el usuario S√ç tiene sesi√≥n y est√° en el login,
            // lo mandamos a la pantalla principal dentro de '(stack)/home'.
            console.log('‚úÖ Con sesi√≥n, redirigiendo a home');
            router.replace('/(stack)/home');
        }
    }, [session, segments, isLoading]);
}

export const AuthProvider = ({ children }: any) => {
    const [session, setSession] = useState<string | null>(null);
    const [user, setUser] = useState<any | null>(null); // Estado para guardar el objeto del usuario
    const [isLoading, setIsLoading] = useState(true);

    useProtectedRoute(session, isLoading); // üëà Pasar isLoading

    useEffect(() => {
        const loadSession = async () => {
            try {
                // üóÑÔ∏è Inicializar base de datos
                console.log('üóÑÔ∏è Inicializando base de datos...');
                const db = await getDBConnection();
                await createClientesTable(db);
                await createGrabacionesTable(db);
                await createListaClientesTable(db);
                console.log('‚úÖ Tablas de base de datos inicializadas');

                const token = await SecureStore.getItemAsync('Tokenbb');
                const userString = await SecureStore.getItemAsync('userData'); // Lee el string

                if (token && userString) {
                    console.log('‚úÖ Sesi√≥n recuperada desde SecureStore');
                    setSession(token);
                    setUser(JSON.parse(userString)); // Parsea el string a objeto
                } else {
                    console.log('‚ö†Ô∏è No se encontr√≥ sesi√≥n guardada');
                }
            } catch (error) {
                console.error('‚ùå Error al cargar la sesi√≥n:', error);
            } finally {
                setIsLoading(false);
            }
        };
        loadSession();
    }, []);

    const login = async (token: string, userData: any) => {
        try {
            setSession(token);
            setUser(userData);
            await SecureStore.setItemAsync('Tokenbb', token);
            // ¬°Aqu√≠ est√° la correcci√≥n! Convertimos el objeto userData a string
            await SecureStore.setItemAsync('userData', JSON.stringify(userData));
            console.log('‚úÖ Sesi√≥n guardada correctamente');
        } catch (error) {
            console.error('‚ùå Error al guardar la sesi√≥n:', error);
        }
    };

    const logout = async () => {
        try {
            setSession(null);
            setUser(null);
            await SecureStore.deleteItemAsync('Tokenbb');
            await SecureStore.deleteItemAsync('userData'); // Borra tambi√©n los datos del usuario
            console.log('‚úÖ Sesi√≥n cerrada correctamente');
        } catch (error) {
            console.error('‚ùå Error al cerrar sesi√≥n:', error);
        }
    };

    // Ahora expones tambi√©n al usuario en el value
    return (
        <AuthContext.Provider value={{ session, user, isLoading, login, logout }}>
            {children}
        </AuthContext.Provider>
    );
};